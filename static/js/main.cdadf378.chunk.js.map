{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","highestBid","highestBidder","accounts","contract","input","show_high","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","AuctionContract","networks","instance","Contract","abi","address","methods","call","response1","response2","setState","alert","error","myChangeHandler","event","target","value","clicked_bid","bid","send","from","utils","toWei","clicked_withdraw","withdraw","clicked_highestBid","clicked_highestBidder","this","sh","Number","hexn","toString","toUpperCase","fromWei","className","type","onChange","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cdadf378.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport AuctionContract from \"./contracts/Auction.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { highestBid: 0, highestBidder: \"\", web3: null, accounts: null, contract: null, input: \"\", show_high: null  };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = AuctionContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        AuctionContract.abi,\n        deployedNetwork && deployedNetwork.address,\n\n      );\n    const response1 = await instance.methods.highestBid().call();\n    const response2 = await instance.methods.highestBidder().call();\n    // Update state with the results\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance, highestBid: response1, highestBidder: response2});\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n \nmyChangeHandler = (event) => {\n        this.setState({input: event.target.value}, ()=>{\n        console.log(this.state.input)\n        });\n\n}\n\n \n  /*runExample = async () => {\n    const { accounts, contract } = this.state;\n        console.log(\"hi\");\n    console.log(accounts);\n    // Stores a given value, 5 by default.\n    await contract.methods.set(this.state.input).send({from: accounts[0]});\n\n    // Get the value from the contract to prove it worked.\n    const response = await contract.methods.get().call();\n\n    // Update state with the result.\n    this.setState({ highestBid: response });\n  };*/\n\n clicked_bid = async () => {\n    const { accounts, contract, web3 } = this.state;\n\n    // Stores a given value, state.input.\n    await contract.methods.bid().send({from: accounts[0], value: web3.utils.toWei(this.state.input)});\n\n    // Get the value from the contract to prove it worked.\n    const response1 = await contract.methods.highestBid().call();\n    const response2 = await contract.methods.highestBidder().call();\n    // Update state with the result.\n    this.setState({ highestBid: response1, highestBidder: response2 });\n  };\n  \n   clicked_withdraw = async () => {\n    const { accounts, contract } = this.state;\n\n    await contract.methods.withdraw().send({from: accounts[0]});\n\n    const response1 = await contract.methods.highestBid().call();\n    const response2 = await contract.methods.highestBidder().call();\n    // Update state with the result.\n    this.setState({ highestBid: response1, highestBidder: response2});\n  };\n\nclicked_highestBid = async () => {\n   const  contract  = this.state.contract;\n\n    const response1 = await contract.methods.highestBid().call();\n    const response2 = await contract.methods.highestBidder().call();\n    console.log(response1);\n    \n    // Update state with the result.\n    this.setState({ highestBid: response1,highestBidder: response2, show_high: response1});\n  };\n\nclicked_highestBidder = async () => {\n    const  contract  = this.state.contract;\n\n    const response1 = await contract.methods.highestBidder().call();\n    const response2 = await contract.methods.highestBid().call();\n    console.log(response1);\n    // Update state with the result.\n    this.setState({ highestBidder: response1,highestBid: response2, show_high: response1});\n  };\n  \n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n  }\n        let sh\n        if(Number(this.state.highestBid) == 0){\n                sh = <div>Highest Bid: 0, Highest Bidder: NONE </div>;\n        }\n        else{\n\t  const web3 = this.state.web3;\n          /*const contract = this.state.contract;\n\t  let highestBid\n\t  let highestBidder\n          highestBid = await  contract.methods.getHighestBid().call();\n          highestBidder = await contract.methods.getHighestBidder().call();\n          this.clicked_highestBid();\n          this.clicked_highestBidder();*/\n\t  let hexn\n\t  hexn = ((this.state.highestBidder).toString(16)).toUpperCase();\n          sh = <div>Highest Bid: {Number(web3.utils.fromWei(this.state.highestBid))}, Highest Bidder: {hexn} </div>\n        }\n        /*let show_highest\n        if(this.state.highestBid == null || this.state.highestBidder == null){\n                show_highest = \"\"\n        }\n        else{\n                show_highest = <div><div>Highest Bid:{this.state.highestBid}</div>\n                </div>\n        }*/\n\tconsole.log(Number(this.state.highestBid));\n    return (\n      <div className=\"App\">\n        <h1>Welcome to the world's best Auction!</h1>\n        <p>Bid and withdraw to your hearts content :).</p>\n        <h2>Select what to do:</h2>\n        <p>\n          Make a bid\n        </p>\n                <input type=\"text\" onChange={this.myChangeHandler}/>\n        <button onClick={this.clicked_bid}>BID</button>\n        <p>\n          Withdraw bid\n        </p>\n        <button onClick={this.clicked_withdraw}>WITHDRAW</button>\n        <div>\n        <button onClick={this.clicked_highestBid}>Highest Bid</button>\n        </div>\n         <div>\n        <button onClick={this.clicked_highestBidder}>Highest Bidder</button>\n        </div>\n        <div>\n        {sh}\n        </div>\n      </div>\n    );\n  }\n}\n \n \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}